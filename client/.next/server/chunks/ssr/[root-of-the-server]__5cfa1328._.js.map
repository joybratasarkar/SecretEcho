{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":["file:///home/joy/Desktop/SecretEcho/client/src/services/api.ts"],"sourcesContent":["const BASE_URL = \"http://localhost:5000\"; // or use process.env.NEXT_PUBLIC_API_URL\n\nexport const login = async (username: string, password: string) => {\n  const res = await fetch(`${BASE_URL}/api/auth/login`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ username, password }),\n  });\n  return res.json();\n};\n\n// export const register = async (email: string, password: string) => {\n//   const res = await fetch(`${BASE_URL}/api/auth/signup`, {\n//     method: \"POST\",\n//     headers: { \"Content-Type\": \"application/json\" },\n//     body: JSON.stringify({ email, password }),\n//   });\n//   return res.json();\n// };\n\n// api.ts\nexport const register = async (username: string, email: string, password: string) => {\n  const res = await fetch(`${BASE_URL}/api/auth/signup`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ username, email, password }),\n  });\n  return res.json();\n};\n\n\n\nexport const sendMessage = async (token: string, message: string) => {\n  const res = await fetch(`${BASE_URL}/messages`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify({ message }),\n  });\n  return res.json();\n};\n\n\nexport const fetchMessages = async (token: string, userId: string) => {\n  const res = await fetch(`${BASE_URL}/api/conversations/${userId}`, {\n    headers: { Authorization: `Bearer ${token}` },\n  });\n\n  if (!res.ok) {\n    throw new Error(\"Failed to fetch messages\");\n  }\n\n  return res.json();  // returns array of conversation documents with populated messages\n};\n"],"names":[],"mappings":";;;;;;AAAA,MAAM,WAAW,yBAAyB,yCAAyC;AAE5E,MAAM,QAAQ,OAAO,UAAkB;IAC5C,MAAM,MAAM,MAAM,MAAM,GAAG,SAAS,eAAe,CAAC,EAAE;QACpD,QAAQ;QACR,SAAS;YAAE,gBAAgB;QAAmB;QAC9C,MAAM,KAAK,SAAS,CAAC;YAAE;YAAU;QAAS;IAC5C;IACA,OAAO,IAAI,IAAI;AACjB;AAYO,MAAM,WAAW,OAAO,UAAkB,OAAe;IAC9D,MAAM,MAAM,MAAM,MAAM,GAAG,SAAS,gBAAgB,CAAC,EAAE;QACrD,QAAQ;QACR,SAAS;YAAE,gBAAgB;QAAmB;QAC9C,MAAM,KAAK,SAAS,CAAC;YAAE;YAAU;YAAO;QAAS;IACnD;IACA,OAAO,IAAI,IAAI;AACjB;AAIO,MAAM,cAAc,OAAO,OAAe;IAC/C,MAAM,MAAM,MAAM,MAAM,GAAG,SAAS,SAAS,CAAC,EAAE;QAC9C,QAAQ;QACR,SAAS;YACP,gBAAgB;YAChB,eAAe,CAAC,OAAO,EAAE,OAAO;QAClC;QACA,MAAM,KAAK,SAAS,CAAC;YAAE;QAAQ;IACjC;IACA,OAAO,IAAI,IAAI;AACjB;AAGO,MAAM,gBAAgB,OAAO,OAAe;IACjD,MAAM,MAAM,MAAM,MAAM,GAAG,SAAS,mBAAmB,EAAE,QAAQ,EAAE;QACjE,SAAS;YAAE,eAAe,CAAC,OAAO,EAAE,OAAO;QAAC;IAC9C;IAEA,IAAI,CAAC,IAAI,EAAE,EAAE;QACX,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO,IAAI,IAAI,IAAK,kEAAkE;AACxF","debugId":null}},
    {"offset": {"line": 199, "column": 0}, "map": {"version":3,"sources":["file:///home/joy/Desktop/SecretEcho/client/src/components/ChatBox.tsx"],"sourcesContent":["\"use client\";\n\nimport { useEffect, useState, useRef } from \"react\";\nimport { io, Socket } from \"socket.io-client\";\nimport { fetchMessages } from \"@/services/api\"; // Your API to fetch past messages\n\nconst BASE_URL = \"http://localhost:5000\"; // Defined at the top\n\nfunction LoadingDots() {\n  return <span className=\"animate-pulse text-sm text-gray-500\">Typing...</span>;\n}\n\ninterface Message {\n  _id: string;\n  content: string;\n  sender: { _id: string; username: string } | null;\n  createdAt: string;\n  isAIResponse: boolean;\n}\n\nfunction formatDate(dateStr: string) {\n  const d = new Date(dateStr);\n  return d.toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" });\n}\n\nexport default function ChatBox() {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [input, setInput] = useState(\"\");\n  const [aiTyping, setAiTyping] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const socketRef = useRef<Socket | null>(null);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  // Grab token and user_id from localStorage if available\n  const token = typeof window !== \"undefined\" ? localStorage.getItem(\"token\") : null;\n  const user_id = typeof window !== \"undefined\" ? localStorage.getItem(\"user_id\") : null;\n\n  useEffect(() => {\n    if (!token || !user_id) return;\n    console.log(\"Connecting to socket with token:\", token, \"and user_id:\", user_id);\n\n    // Connect socket with token auth\n    const socket = io(BASE_URL, {\n      auth: { token },\n      transports: [\"websocket\"], // optional: force websocket\n      withCredentials: true,\n    });\n    console.log(\"Socket connected:\", socket.id);\n\n    socketRef.current = socket;\n\n    // Fetch existing messages from API\n    setLoading(true);\n    fetchMessages(token, user_id)\n      .then((conversations) => {\n        const allMessages = conversations.flatMap((conv: any) => conv.messages);\n        setMessages(allMessages);\n      })\n      .catch((err) => console.error(\"Failed to fetch messages:\", err))\n      .finally(() => setLoading(false));\n    socket.on(\"connect\", () => {\n      console.log(\"✅ Socket connected:\", socket.id);\n    });\n    // Listen for new messages from server\n    socket.on(\"newMessage\", (msg: Message) => {\n      setMessages((prev) => [...prev, msg]);\n      console.log(\"New message received:\", msg);\n\n    });\n\n    socket.on(\"connect_error\", (err: any) => {\n      console.error(\"❌ Socket connection error:\", err.message || err);\n    });\n\n    socket.on(\"aiTyping\", (typing: boolean) => {\n      setAiTyping(typing);\n    });\n\n    // Cleanup on unmount\n    return () => {\n      socket.disconnect();\n      console.log(\"Socket disconnected\");\n      socket.off(\"newMessage\");\n      socket.off(\"aiTyping\");\n      socket.off(\"connect_error\");\n      socketRef.current?.removeAllListeners();\n\n      socketRef.current = null;\n    };\n  }, [token, user_id]);\n\n  // Scroll to bottom on new messages or typing indicator change\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages, aiTyping]);\n\n  // Send message handler\n  const handleSend = () => {\n    if (!input.trim() || !socketRef.current) return;\n\n    socketRef.current.emit(\"sendMessage\", input.trim());\n    setInput(\"\");\n  };\n\n  return (\n    <div className=\"p-6 h-screen flex flex-col max-w-2xl mx-auto bg-white shadow-lg rounded-lg\">\n      {/* Messages display */}\n      <div className=\"flex-1 overflow-y-auto mb-4 space-y-3 px-2\" style={{ scrollbarWidth: \"thin\" }}>\n        {loading ? (\n          <div className=\"text-center text-gray-400 mt-10\">Loading messages...</div>\n        ) : messages.length === 0 ? (\n          <div className=\"text-center text-gray-400 mt-10\">No messages yet</div>\n        ) : (\n          messages.map((msg) => {\n            // Determine if the message is from the current user\n            // Assuming user_id is stored as string matching sender._id or sender.username\n            const isUser = msg.sender?._id === user_id || msg.sender?.username === user_id;\n            const isAI = msg.isAIResponse;\n\n            return (\n              <div\n                key={msg._id}\n                className={`flex ${isUser ? \"justify-end\" : \"justify-start\"}`}\n              >\n                <div\n                  className={`max-w-[75%] px-4 py-2 rounded-lg break-words \n          ${isUser ? \"bg-blue-600 text-white rounded-br-none\" : \"\"}\n          ${isAI ? \"bg-gray-300 text-gray-900 rounded-bl-none\" : \"\"}\n          ${!isUser && !isAI ? \"bg-gray-200 text-gray-900 rounded-bl-none\" : \"\"}\n        `}\n                >\n                  <div className=\"whitespace-pre-wrap text-left\">{msg.content}</div>\n                </div>\n              </div>\n            );\n          })\n        )}\n        {aiTyping && (\n          <div className=\"max-w-[60%] px-4 py-2 bg-gray-200 rounded-xl rounded-bl-none shadow-sm text-gray-600 select-none\">\n            <LoadingDots />\n          </div>\n        )}\n        <div ref={messagesEndRef} />\n      </div>\n\n      {/* Input box and send button */}\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          handleSend();\n        }}\n        className=\"flex space-x-3\"\n      >\n        <input\n          type=\"text\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          className=\"flex-1 border border-gray-300 rounded-md px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 transition\"\n          placeholder=\"Type your message...\"\n          autoComplete=\"off\"\n          spellCheck={false}\n        />\n        <button\n          type=\"submit\"\n          disabled={!input.trim()}\n          className={`px-5 py-2 rounded-md text-white font-semibold transition\n            ${input.trim() ? \"bg-blue-600 hover:bg-blue-700\" : \"bg-blue-300 cursor-not-allowed\"}\n          `}\n        >\n          Send\n        </button>\n      </form>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}